name: CI RAIWidgets pytest

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci-raiwidgets-pytest:
    env:
      node-version: 16.x
    strategy:
      # keep running remaining matrix jobs even if one fails
      # to avoid having to rerun all jobs several times
      fail-fast: false
      matrix:
        packageDirectory: ["raiwidgets"]
        operatingSystem: [ubuntu-latest]
        pythonVersion: [3.8]

    runs-on: ${{ matrix.operatingSystem }}

    steps:
      - uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.pythonVersion }}

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}

      - name: Install yarn
        run: npm install yarn -g

      - name: Install yarn dependencies
        run: yarn install --frozen-lock-file

      - name: auto version
        run: |
          yarn auto-version -r

      - name: Build Typescript
        run: yarn buildall
      
      - name: Install pytorch
        shell: bash -l {0}
        run: |
          conda install --yes --quiet pytorch torchvision captum cpuonly -c pytorch

      - name: Setup tools
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel twine
          pip install --upgrade "pip-tools<=7.1.0"

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          pip install -r requirements-dev.txt
          pip install .
        working-directory: ${{ matrix.packageDirectory }}
      
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          pip install -r requirements-dev.txt
          pip install .
        working-directory: responsibleai

      - name: Pip freeze
        shell: bash -l {0}
        run: pip freeze
      
      # - name: build wheel for raiwidgets
      #   shell: bash -l {0}
      #   run: python setup.py sdist bdist_wheel
      #   working-directory: raiwidgets

      # - name: build wheel for responsibleai
      #   shell: bash -l {0}
      #   run: python setup.py sdist bdist_wheel
      #   working-directory: responsibleai

      # # run tests before publishing to PyPI
      # - name: install raiwidgets wheel locally
      #   shell: bash -l {0}
      #   run: find ./dist/ -name '*.whl' -exec pip install {} \;
      #   working-directory: raiwidgets

      # - name: install responsibleai wheel locally
      #   shell: bash -l {0}
      #   run: find ./dist/ -name '*.whl' -exec pip install {} \;
      #   working-directory: responsibleai

      - name: Run notebook tests
        shell: bash -l {0}
        run: python -m pytest -s -v notebooks -m notebooks

      - name: Run tests
        shell: bash -l {0}
        id: raiwidgettests
        run: |
          pytest ./tests/
        working-directory: ${{ matrix.packageDirectory }}

      - if: ${{ (steps.raiwidgettests.outcome == 'success') }}
        name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.packageDirectory }}-code-coverage-results
          path: ${{ matrix.packageDirectory }}/htmlcov

      - if: ${{ (matrix.operatingSystem == 'windows-latest') && (matrix.pythonVersion == '3.8') }}
        name: Upload to codecov
        id: codecovupload1
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ matrix.packageDirectory }}
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          files: ./${{ matrix.packageDirectory }}/coverage.xml
          flags: unittests
          name: codecov-umbrella
          verbose: true

      - if: ${{ (steps.codecovupload1.outcome == 'failure') && (matrix.pythonVersion == '3.8') && (matrix.operatingSystem == 'windows-latest') }}
        name: Retry upload to codecov
        id: codecovupload2
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ matrix.packageDirectory }}
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          files: ./${{ matrix.packageDirectory }}/coverage.xml
          flags: unittests
          name: codecov-umbrella
          verbose: true

      - name: Set codecov status
        if: ${{ (matrix.pythonVersion == '3.8') && (matrix.operatingSystem == 'windows-latest') }}
        shell: bash
        run: |
          if ${{ (steps.codecovupload1.outcome == 'success') || (steps.codecovupload2.outcome == 'success') }} ; then
            echo fine
          else
            exit 1
          fi
