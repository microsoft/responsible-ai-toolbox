name: CI RAIWidgets pytest

on:
  push:
    branches: [main, postga]
  pull_request:
    branches: [main, postga]

jobs:
  ci-raiwidgets-pytest:
    env:
      node-version: 16.8
    strategy:
      matrix:
        packageDirectory: ["raiwidgets"]
        operatingSystem: [ubuntu-latest, macos-latest, windows-latest]
        pythonVersion: [3.6, 3.7, 3.8, 3.9]
        exclude:
          - packageDirectory: "raiwidgets"
            operatingSystem: macos-latest
            pythonVersion: 3.9

    runs-on: ${{ matrix.operatingSystem }}

    steps:
      - uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.pythonVersion }}

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}

      - name: Install yarn
        run: npm install yarn -g

      - name: Install yarn dependencies
        run: yarn install --frozen-lock-file

      - name: Build Typescript
        run: yarn buildall

      - if: ${{ matrix.operatingSystem == 'macos-latest' }}
        name: Install latest numpy from conda-forge for MacOS
        shell: bash -l {0}
        run: |
          conda install --yes --quiet -c conda-forge numpy

      - if: ${{ matrix.operatingSystem == 'macos-latest' }}
        name: Install latest lightgbm from conda-forge for MacOS
        shell: bash -l {0}
        run: |
          conda install --yes --quiet lightgbm -c conda-forge

      - name: Setup tools
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip~=21.3
          pip install --upgrade setuptools
          pip install --upgrade pip-tools

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          pip install -r requirements-dev.txt --ignore-installed
          pip install -v -e .
        working-directory: ${{ matrix.packageDirectory }}

      - name: Pip freeze
        shell: bash -l {0}
        run: |
          pip freeze > installed-requirements-dev.txt
          cat installed-requirements-dev.txt
        working-directory: ${{ matrix.packageDirectory }}

      - name: Upload requirements
        uses: actions/upload-artifact@v3
        with:
          name: requirements-dev.txt
          path: ${{ matrix.packageDirectory }}/installed-requirements-dev.txt

      - name: Run tests
        shell: bash -l {0}
        id: raiwidgettests
        run: |
          pytest --durations=10 --junitxml=junit/test-results.xml --cov=${{ matrix.packageDirectory }} --cov-report=xml --cov-report=html
        working-directory: ${{ matrix.packageDirectory }}

      - if: ${{ (steps.raiwidgettests.outcome == 'success') }}
        name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.packageDirectory }}-code-coverage-results
          path: ${{ matrix.packageDirectory }}/htmlcov

      - if: ${{ (matrix.operatingSystem == 'windows-latest') && (matrix.pythonVersion == '3.8') }}
        name: Upload to codecov
        id: codecovupload1
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ matrix.packageDirectory }}
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          files: ./${{ matrix.packageDirectory }}/coverage.xml
          flags: unittests
          name: codecov-umbrella
          verbose: true

      - if: ${{ (steps.codecovupload1.outcome == 'failure') && (matrix.pythonVersion == '3.8') && (matrix.operatingSystem == 'windows-latest') }}
        name: Retry upload to codecov
        id: codecovupload2
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ matrix.packageDirectory }}
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          files: ./${{ matrix.packageDirectory }}/coverage.xml
          flags: unittests
          name: codecov-umbrella
          verbose: true

      - name: Set codecov status
        if: ${{ (matrix.pythonVersion == '3.8') && (matrix.operatingSystem == 'windows-latest') }}
        shell: bash
        run: |
          if ${{ (steps.codecovupload1.outcome == 'success') || (steps.codecovupload2.outcome == 'success') }} ; then
            echo fine
          else
            exit 1
          fi
